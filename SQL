

https://www.datacamp.com/courses/intro-to-sql-for-data-science
https://www.udacity.com/course/sql-for-data-analysis--ud198
https://www.analyticsvidhya.com/blog/2017/05/questions-sql-for-all-aspiring-data-scientists/

https://stackoverflow.com/questions/15387808/mysql-join-two-tables-count-and-sum-from-second-table



https://data36.com/bash-intro-2-data-coding-101/
https://data36.com/command-line-data-science-introduction-to-bash/
https://www.datascienceatthecommandline.com/index.html
https://data36.com/variables-if-statements-while-loops-bash-data-science/
https://medium.freecodecamp.org/how-to-write-modular-readable-sql-using-named-result-sets-and-functions-ac49f1ca25c1

10/3/2018
https://launchschool.com/books/sql/read/joins
https://www.techrepublic.com/article/10-tips-for-sorting-grouping-and-summarizing-sql-data/

----------------------------------------
https://data36.com/sql-data-analysis-advanced-tutorial-ep6/
https://data36.com/sql-functions-beginners-tutorial-ep3/
https://data36.com/sql-where-clause-tutorial-beginners-ep2/
https://data36.com/sql-join-data-analysis-tutorial-ep5/


https://www.kaggle.com/dimarudov/data-analysis-using-sql
https://blog.modeanalytics.com/five-public-dataset/


10/2/201/
https://www.datacamp.com/courses/intro-to-sql-for-data-science
https://www.udacity.com/course/sql-for-data-analysis--ud198
https://www.analyticsvidhya.com/blog/2017/05/questions-sql-for-all-aspiring-data-scientists/

https://stackoverflow.com/questions/15387808/mysql-join-two-tables-count-and-sum-from-second-table

=============================================================================================================
Getting Top queries ...

select yyyymm,zip, rank() over (partition by a.yyyymm order by a.zip_ct desc ) as rk ,zip_ct
                                                from 
                                                            (select yyyymm,substring(work_in_postalcode,1,5) as zip,count(substring(work_in_postalcode,1,5)) as zip_ct
                                                            from any_table
                                                            where yyyymm between '201805' and '201807'
                                                            group by yyyymm,substring(work_in_postalcode,1,5)
                                                            order by yyyymm,zip_ct desc
                                                            ) a 

															
															
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
score count good,bad,change, unchanged stat															
select SUM(case when new_score_lens = '9999' and old_score_lens != '9999' THEN 1 ELSE 0 END) as got_worse,
    SUM(case when new_score_lens != '9999' and old_score_lens = '9999' THEN 1 ELSE 0 END) as got_better,
    SUM(case when new_score_lens != '9999' and new_score_lens = old_score_lens then 1 else 0 end) as unchanged,
    SUM(case when new_score_lens != '9999' and old_score_lens != '9999' and new_score_lens != old_score_lens then 1 else 0 end) as changed,
    SUM(case when new_score_lens = '9999' and old_score_lens = '9999' then 1 else 0 end) as both_unclassified
from
    (SELECT
        CASE WHEN new_score >= 0.7 THEN new_score_lens ELSE '9999' END as new_score_lens,
        CASE WHEN old_score >= 0.7 THEN old_score_lens ELSE '9999' END as old_score_lens
    FROM
        anyu table) ign

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Based on Source data , count records as good and bad  from two tables

select b.source, 
count(a.employee_guid),
sum(case when a.home_code like "S%" then 1 else 0 end) as hs,
sum(case when a.work_code like "S%" then 1 else 0 end) as ws
from any_address_table as a
inner join
any_employee_table as b 
on a.employee_guid=b.employee_guid and a.yyyymm=b.yyyymm
where a.yyyymm='201807' and (a.home_code is not null or a.work_code is not null)
group by b.source
order by b.source 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



*******************#####################################
To be honest I don’t use the SQL CASE statement too often during my daily job… 
but sometimes it’s very handy when I have to do some quick and dirty data cleaning/transformation 
(e.g. change all the values from ‘M’ to ‘Male’ and from ‘F’ to ‘Female’ in a table) or 
turn a continuous value into a categorical value (like we did in the above example)

-------------------------------------------------------------------------------------------------------
--we want to see how many planes departed early, late or on time.
--departed on time 
SELECT "early" as departure ,COUNT(*)
FROM flight_delays
where depdelay < 0
union
SELECT "on Time" as departure ,COUNT(*)
FROM flight_delays
where depdelay = 0
union
SELECT "Dealy" as departure ,COUNT(*)
FROM flight_delays
where depdelay > 0;

--OR

select count(*),
       CASE WHEN depdelay < 0 then 'Early'
            WHEN depdelay > 0 then 'Dealy'
            else 'On Time'
       END as segment
FROM flight_delays
group by segment

-------------------------------------------------------------------------------------------------------------
